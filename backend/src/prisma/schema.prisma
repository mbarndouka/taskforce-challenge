
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  twoFactorSecret String?  // For 2FA
  isTwoFactorEnabled Boolean @default(false) // Track if 2FA is enabled
  accounts  Account[]
  budgets   Budget[]
  expenses  Expense[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id        Int      @id @default(autoincrement())
  type      String   // e.g., Bank, Mobile Money, Cash
  balance   Float
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  transactions Transaction[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id        Int      @id @default(autoincrement())
  amount    Float
  type      String   // e.g., Income, Expense
  accountId Int
  account   Account  @relation(fields: [accountId], references: [id])
  categoryId Int?
  category  Category? @relation(fields: [categoryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  parentId  Int?
  parent    Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryToCategory")
  transactions Transaction[]
  expenses  Expense[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id        Int      @id @default(autoincrement())
  amount    Float
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Expense {
  id        Int      @id @default(autoincrement())
  amount    Float
  categoryId Int
  category  Category @relation(fields: [categoryId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}